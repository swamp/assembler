/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Peter Bjorklund. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

package asmcompile

import (
	"fmt"
	"strconv"
	"strings"

	assembler "github.com/swamp/assembler/lib/assembler_sp"
)

func parseTargetRegister(register string) (assembler.TargetVariable, error) {
	i, err := strconv.Atoi(register)
	if err != nil {
		return nil, err
	}
	r := assembler.NewVariable(nil, 0, assembler.NewVariableName("temp"))
	//reg := swampopcodetype.NewRegister(uint8(i))
	//r.SetRegister(reg)
	return r, nil
}

func parseSourceRegister(register string) (assembler.SourceVariable, error) {
	i, err := strconv.Atoi(register)
	if err != nil {
		return nil, err
	}
	r := assembler.NewVariable(nil, 0, assembler.NewVariableName("temp"))
	//reg := swampopcodetype.NewRegister(uint8(i))
	//r.SetRegister(reg)
	return r, nil
}

func handleCallExternal(code *assembler.Code, context *assembler.Context, args []string) error {
	// TODO: FIXME: NOW
	destination, destErr := parseTargetRegister(args[0])
	if destErr != nil {
		return destErr
	}
	name := args[1]

	callArgs := args[2:]
	var argVars []assembler.SourceVariable
	for _, arg := range callArgs {
		sourceVar, sourceVarErr := parseSourceRegister(arg)
		if sourceVarErr != nil {
			return sourceVarErr
		}
		argVars = append(argVars, sourceVar)
	}

	functionRegister, refErr := context.Constants().AllocateExternalFunctionReferenceConstant(name)
	if refErr != nil {
		return refErr
	}

	code.CallExternal(destination, functionRegister, argVars)

	return nil
}

func handleStatement(code *assembler.Code, context *assembler.Context, cmd string, args []string) error {
	switch cmd {
	case "callexternal":
		return handleCallExternal(code, context, args)
	}

	return fmt.Errorf("Unknown statement %v", cmd)
}

func CompileToCodeAndContext(asm string, code *assembler.Code, context *assembler.Context) error {
	lines := strings.Split(asm, "\n")
	for _, line := range lines {
		parts := strings.Split(line, " ")
		cmd := parts[0]
		args := parts[1:]

		err := handleStatement(code, context, cmd, args)
		if err != nil {
			return err
		}
	}

	return nil
}

func CompileToCode(asm string, code *assembler.Code) (*assembler.FunctionRootContext, error) {
	context := assembler.NewFunctionRootContext()
	compileErr := CompileToCodeAndContext(asm, code, context.ScopeContext())
	return context, compileErr
}

func Compile(asm string, verbose bool) ([]byte, *assembler.FunctionRootContext, error) {
	code := assembler.NewCode()

	context, compileErr := CompileToCode(asm, code)
	if compileErr != nil {
		return nil, nil, compileErr
	}

	octets, resolveErr := code.Resolve(context, verbose)
	if resolveErr != nil {
		return nil, nil, resolveErr
	}

	if verbose {
		context.ShowSummary()
	}

	return octets, context, nil
}
